cmake_minimum_required(VERSION 3.15)
project(eng3d CXX C)

#
# Defines - see README.1st
#
option(E3D_BUILD_ENGINE "Enable building the Eng3D library" ON)
option(E3D_DEBUG, "Enable debug" ON)
option(E3D_BACKEND_OPENGL, "Enable the OpenGL backend" OFF)
option(E3D_BACKEND_GLES, "Enable the GLES backend" ON)
option(E3D_BACKEND_RGX, "Enable dummy graphics" OFF)
option(E3D_MANAGED_HEAP, "Allow Eng3D to manage heap (useful for debugging without instrumentation)" ON)
option(E3D_VENDORED, "Build libraries instead of using the system ones" OFF)
option(E3D_VENDORED_TBB, "Build oneTBB from source" "${E3D_VENDORED}")
option(E3D_VENDORED_SDL2, "Build SDL2 from source" "${E3D_VENDORED}")
option(E3D_VENDORED_SDL2_TTF, "Build SDL2_ttf from source" "${E3D_VENDORED}")
option(E3D_VENDORED_ASSIMP, "Build assimp from source" "${E3D_VENDORED}")
option(E3D_VENDORED_ASSIMP, "Build assimp from source" "${E3D_VENDORED}")
option(E3D_PIE, "Build as a position-independent library" OFF)
option(E3D_BUILD_STATIC, "Whetever to make a static library or not" ON)

IF(E3D_DEBUG)
	add_definitions(-DE3D_DEBUG=1)
ENDIF()

IF(E3D_BACKEND_OPENGL)
	add_definitions(-DE3D_BACKEND_OPENGL=1)
ELSEIF(E3D_BACKEND_GLES)
	add_definitions(-DE3D_BACKEND_GLES=1)
ELSEIF(E3D_BACKEND_RGX)
	add_definitions(-DE3D_BACKEND_RGX=1)
ENDIF()

IF(E3D_MANAGED_HEAP)
	add_definitions(-DE3D_MANAGED_HEAP=1)
ENDIF()

#
# Compilation flags
#
IF(NOT MSVC)
	set(CMAKE_CXX_FLAGS "-Wall -Wextra ${CMAKE_CXX_FLAGS}")
ENDIF()
IF(UNIT_TEST)
	add_definitions(-DUNIT_TEST=1)
ENDIF()
IF(WIN32)
	add_definitions(-DE3D_TARGET_WINDOWS=1)
ELSEIF(UNIX)
	include_directories("/usr/include/SDL2")
	add_definitions(-DE3D_TARGET_UNIX=1)
	IF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
		# Workaround for clang (see https://bugs.launchpad.net/ubuntu/+source/libsdl2-ttf/+bug/1872023)
		link_directories(/usr/local/lib)
	ENDIF()
ELSEIF(ANDROID)
	add_definitions(-DE3D_TARGET_UNIX=1 -DE3D_TARGET_ANDROID=1)
	add_definitions(-DE3D_HANDHELD=1)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
	include_directories("/usr/pkg/include/SDL2")
	add_definitions(-DE3D_TARGET_UNIX=1)
	add_definitions(-DE3D_TARGET_NETBSD=1)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "NintendoSwitch")
	include_directories("${DEVKITPRO}/portlibs/switch/include/")
	add_definitions(-DE3D_TARGET_UNIX=1 -DE3D_TARGET_SWITCH=1)
	add_definitions(-DE3D_HANDHELD=1)
	# Compiler is for 32bits and doesn't support long long
	add_definitions(-DLUA_32BITS=1)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "NintendoWii")
	link_directories("${DEVKITPRO}/libogc/lib")
	include_directories("${DEVKITPRO}/libogc/include")
	add_definitions(-DE3D_TARGET_RVL=1)
ENDIF()

#
# Dependencies
#
set(CMAKE_POSITION_INDEPENDENT_CODE "${E3D_PIE}")

#
# Source code files
#
file(GLOB MAIN_SOURCES "${PROJECT_SOURCE_DIR}/src/*.cpp" "${PROJECT_SOURCE_DIR}/src/ui/*.cpp")
execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink "${PROJECT_SOURCE_DIR}/src" "${PROJECT_SOURCE_DIR}/eng3d")

# Switch doesn't support shared libraries
IF(E3D_BUILD_STATIC)
	message(STATUS "Building a static library")
	add_library(eng3d STATIC ${MAIN_SOURCES})
ELSE()
	message(STATUS "Building a shared library")
	add_library(eng3d SHARED ${MAIN_SOURCES})
ENDIF()
target_include_directories(eng3d PRIVATE "${PROJECT_SOURCE_DIR}")
set_property(TARGET eng3d PROPERTY CMAKE_CXX_STANDARD 20)
set_property(TARGET eng3d PROPERTY CMAKE_FIND_LIBRARY_SUFFIXES ".a")

# Enable LTO/IPO if supported by the compiler
include(CheckIPOSupported)
check_ipo_supported(RESULT IPO_SUPPORTED OUTPUT IPO_ERROR)
IF(IPO_SUPPORTED)
	message(STATUS "Enabling IPO")
	set_property(TARGET eng3d PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
ELSE()
	message(STATUS "IPO not supported ${IPO_ERROR}")
ENDIF()

IF(E3D_VENDORED)
	# GLEW
	IF(WIN32 AND E3D_BACKEND_OPENGL)
		set(ONLY_LIBS ON)
		set(glew-cmake_BUILD_SHARED ON)
		FetchContent_Declare(glew-cmake GIT_REPOSITORY "https://github.com/Perlmint/glew-cmake" GIT_PROGRESS TRUE)
		FetchContent_MakeAvailable(glew-cmake)
		target_include_directories(eng3d PRIVATE "${glew-cmake_SOURCE_DIR}/include")
	ENDIF()
	# SDL2
	set(SDL2_DISABLE_SDL2MAIN ON)
	set(SDL2_DISABLE_INSTALL ON)
	set(SDL2_DISABLE_UNINSTALL ON)
	set(SDL_STATIC_PIC ON)
	set(SDL_TEST OFF)
	IF(UNIX)
		set(SDL_X11_XCURSOR ON)
		set(SDL_X11_XINPUT ON)
		set(SDL_X11_XRANDR ON)
		set(SDL_X11_XFIXES ON)
		set(SDL_X11_XSCRNSAVER ON)
		set(SDL_X11_XSHAPE ON)
		set(SDL_X11_XDBE ON)
		set(SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS 1)
		set(SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY 1)
	ENDIF()
	FetchContent_Declare(sdl2 GIT_REPOSITORY "https://github.com/libsdl-org/SDL" GIT_TAG main GIT_PROGRESS TRUE)
	FetchContent_MakeAvailable(sdl2)
	target_include_directories(eng3d PRIVATE "${sdl2_BINARY_DIR}/include-config-debug" "${sdl2_BINARY_DIR}/include-config-release" "${sdl2_BINARY_DIR}/include-config-relwithdebinfo" "${sdl2_BINARY_DIR}/include")
	# SDL2_TTF
	set(SDL2TTF_VENDORED ON)
	set(SDL2TTF_INSTALL OFF)
	set(SDL2TTF_SAMPLES OFF)
	FetchContent_Declare(sdl2_ttf GIT_REPOSITORY "https://github.com/libsdl-org/SDL_ttf" GIT_TAG main GIT_PROGRESS TRUE)
	FetchContent_MakeAvailable(sdl2_ttf)
	target_include_directories(eng3d PRIVATE "${sdl2_ttf_SOURCE_DIR}")
	# ASSIMP
	set(ASSIMP_INSTALL OFF)
	set(ASSIMP_NO_EXPORT ON)
	set(ASSIMP_IGNORE_GIT_HASH ON)
	set(ASSIMP_WARNINGS_AS_ERRORS OFF)
	set(ASSIMP_BUILD_ASSIMP_TOOLS OFF)
	set(ASSIMP_BUILD_SAMPLES OFF)
	set(ASSIMP_BUILD_TESTS OFF)
	set(ASSIMP_BUILD_ZLIB OFF)
	set(BUILD_LIB_TYPE STATIC)
	set(ENABLE_BOOST_WORKAROUND ON)
	FetchContent_Declare(assimp GIT_REPOSITORY "https://github.com/assimp/assimp" GIT_TAG v5.2.4 GIT_PROGRESS TRUE)
	FetchContent_MakeAvailable(assimp)
	target_include_directories(eng3d PRIVATE "${assimp_BINARY_DIR}/include" "${assimp_SOURCE_DIR}/include")
	# GLFW
	IF(NOT ANDROID)
		IF(E3D_BACKEND_OPENGL)
			set(GLFW_LIBRARY_TYPE STATIC)
			set(GLFW_BUILD_TESTS OFF)
			set(GLFW_BUILD_EXAMPLES OFF)
			set(GLFW_BUILD_DOCS OFF)
			set(GLFW_INSTALL OFF)
			FetchContent_Declare(glfw GIT_REPOSITORY "https://github.com/glfw/glfw")
			FetchContent_MakeAvailable(glfw)
		ENDIF()
	ENDIF()
	# ZLIB
	FetchContent_Declare(zlib GIT_REPOSITORY "https://github.com/madler/zlib" GIT_TAG 21767c654d31d2dccdde4330529775c6c5fd5389 GIT_PROGRESS TRUE)
	FetchContent_MakeAvailable(zlib)
ENDIF()

# LUA
set(LUA_BUILD_BINARY OFF)
set(LUA_BUILD_COMPILER OFF)
IF(E3D_BUILD_STATIC OR CMAKE_SYSTEM_NAME STREQUAL "NintendoSwitch")
	set(LUA_ENABLE_SHARED OFF)
	set(LUA_SUPPORT_DL OFF)
ELSE()
	set(LUA_ENABLE_SHARED ON)
	set(LUA_SUPPORT_DL ON)
ENDIF()
FetchContent_Declare(lua GIT_REPOSITORY "https://github.com/walterschell/Lua" GIT_PROGRESS TRUE)
FetchContent_MakeAvailable(lua)
target_include_directories(eng3d PRIVATE "${lua_SOURCE_DIR}/lua-5.4.4/include")

IF(NOT E3D_VENDORED)
	find_package(SDL2 REQUIRED)
	target_include_directories(eng3d PRIVATE ${SDL2_INCLUDE_DIRS})
	target_link_libraries(eng3d PRIVATE ${SDL2_LIBRARIES})

	find_package(assimp)
	IF(assimp_FOUND)
		add_definitions(-DE3D_FEATURE_ASSIMP=1)
		target_include_directories(eng3d PRIVATE ${ASSIMP_INCLUDE_DIRS})
		target_link_libraries(eng3d PRIVATE ${ASSIMP_LIBRARIES})
	ENDIF()

	IF(E3D_BACKEND_OPENGL AND NOT MSVC)
		find_package(GLEW REQUIRED)
		target_include_directories(eng3d PRIVATE ${GLEW_INCLUDE_DIRS})
		target_link_libraries(eng3d PRIVATE ${GLEW_LIBRARIES})
	ENDIF()

	IF(CMAKE_SYSTEM_NAME STREQUAL "NintendoSwitch")
		target_include_directories(eng3d PUBLIC "${DEVKITPRO}/portlibs/switch/include/")
	ELSE()
		find_package(glm)
		IF(glm_FOUND)
			target_include_directories(eng3d PUBLIC ${glm_INCLUDE_DIRS})
			target_link_libraries(eng3d PUBLIC glm::glm)
		ELSE()
			FetchContent_Declare(glm GIT_REPOSITORY "https://github.com/g-truc/glm" GIT_PROGRESS TRUE)
			FetchContent_MakeAvailable(glm)
			target_include_directories(eng3d PUBLIC "${glm_SOURCE_DIR}")
		ENDIF()
	ENDIF()
ENDIF()

#
# Linking
#
target_link_libraries(eng3d PUBLIC lua_static)
target_link_libraries(eng3d PRIVATE SDL2_ttf)
target_link_libraries(eng3d PRIVATE SDL2)
IF(WIN32)
	target_link_libraries(eng3d PRIVATE ws2_32 wsock32)
	IF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR MSVC)
		target_link_libraries(eng3d PRIVATE zlib)
	ELSE()
		target_link_libraries(eng3d PRIVATE m stdc++)
	ENDIF()
	IF(E3D_BACKEND_OPENGL)
		target_link_libraries(eng3d PRIVATE opengl32)
	ENDIF()
ELSEIF(UNIX OR ANDROID)
	target_link_libraries(eng3d PRIVATE m stdc++ z)
	IF(E3D_BACKEND_OPENGL)
		target_link_libraries(eng3d PRIVATE GL)
	ELSEIF(E3D_BACKEND_GLES)
		target_link_libraries(eng3d PRIVATE EGL GLESv1_CM GLESv2 GLESv3)
	ENDIF()
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "NintendoSwitch")
	target_link_libraries(eng3d PRIVATE stdc++)
	target_link_libraries(eng3d PRIVATE drm_nouveau EGL GLESv2 glad glapi)
	target_link_libraries(eng3d PRIVATE freetype bz2) # SDL2_ttf
	target_link_libraries(eng3d PRIVATE SDL2main SDL2_test z png16 minizip)
ENDIF()

# pthread
find_package(Threads)
IF(Threads_FOUND)
	set(THREADS_PREFER_PTHREAD_FLAG ON)
	target_link_libraries(eng3d PRIVATE Threads::Threads)
ENDIF()
